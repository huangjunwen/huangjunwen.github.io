<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jayven@dev</title>
    <link>//huangjunwen.github.io/tags/asn.1/index.xml</link>
    <description>Recent content on Jayven@dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2017 &lt;a href=&#34;mailto:kassarar@gmail.com&#34;&gt;Huang JunWen&lt;/a&gt;; All rights reserved.</copyright>
    <atom:link href="//huangjunwen.github.io/tags/asn.1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Public Key Cryptography 笔记（2.1）-- ASN.1</title>
      <link>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-1-asn1/</link>
      <pubDate>Wed, 01 Feb 2017 09:19:40 +0800</pubDate>
      
      <guid>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-1-asn1/</guid>
      <description>

&lt;script type=&#34;text/javascript&#34; async src=&#34;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;&lt;/script&gt;


&lt;h4 id=&#34;记法和编码&#34;&gt;记法和编码&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;ASN.1（Abstract syntax notation one）&lt;/a&gt; 是一个对数据（类型／值）的记法和编码的&lt;del&gt;祖父级&lt;/del&gt;标准；制定几十年而依然健在且广泛使用。&lt;/p&gt;

&lt;p&gt;对比一下 &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON（Javascript Object Notation）&lt;/a&gt;，JSON 中的记法和编码是等价的，即它的记法就是编码。&lt;/p&gt;

&lt;p&gt;而 ASN.1 中记法和编码是不一样的，记法主要是为人类服务，用于描述，是抽象且实现无关的，例如（摘自&lt;a href=&#34;https://www.obj-sys.com/asn1tutorial/node11.html#asn1_struct&#34;&gt;这里&lt;/a&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AirlineFlight  ::=  SEQUENCE {
    airline   IA5String,
    flight    NumericString,
    seats     SEQUENCE {
                  maximum   INTEGER,
                  occupied  INTEGER,
                  vacant    INTEGER
    },
    airport   SEQUENCE {
                  origin             IA5String,
                  stop1       [0]    IA5String  OPTIONAL,
                  stop2       [1]    IA5String  OPTIONAL,
                  destination        IA5String
              },
    crewsize ENUMERATED {
                 six    (6),
                 eight  (8),
                 ten    (10)
             },
    cancel   BOOLEAN    DEFAULT FALSE
}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而编码则是具体实现序列化以及反序列化的操作，ASN.1 有很多种编码方式，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Basic Encoding Rule (BER)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Canonical Encoding Rules (CER)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distinguished Encoding Rules (DER)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;XML Encoding Rules (XER)&lt;/li&gt;
&lt;li&gt;Packed Encoding Rules (PER)&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇笔记主要记录 ASN.1 记法以及 BER／DER 这两种常用编码。&lt;/p&gt;

&lt;h4 id=&#34;类型-tag&#34;&gt;类型／Tag&lt;/h4&gt;

&lt;p&gt;ASN.1 中数据是有类型的，不同类型的数据有不同的值域，类型按特点用途可以划分成以下四种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;simple type&lt;/strong&gt;，“原子”类型，例如 BOOLEAN，INTEGER 等本身不可分解的基本类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;structured type&lt;/strong&gt;，由其它类型组装而成的类型，包括 SEQUENCE，SEQUENCE OF，SET，SET OF，类似于一些计算机语言中的 struct, array, set 等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tagged type&lt;/strong&gt;，类似于类型别名，用于包装一个已有的类型；这在一些有歧义的场合下可作区分用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other type&lt;/strong&gt;，包括 CHOICE 和 ANY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每一种类型（除 CHOICE 和 ANY 外）都可以由一个 &lt;code&gt;tag := (class, tag number)&lt;/code&gt; 来唯一标识（所以以下 &amp;ldquo;tag&amp;rdquo; 和 “类型” 这两个词基本等价混用），其中类别 &lt;code&gt;class&lt;/code&gt;，相当于命名空间；非负整数 &lt;code&gt;tag number&lt;/code&gt;，相当于在此命名空间中的类型编号；有四种类别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;universal&lt;/strong&gt;，内建类别，这一类别的 tag 对所有应用来说都表示相同的类型，貌似大部分（还是全部？）的 simple/structured 类型都定义在这个类别中，由 X.208 所定义，以下是一些例子：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;End-of-Content&lt;/code&gt;: tag number 为 0，这是个特殊的类型，用于标识不确定长度数据的结束，下面再详叙&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOLEAN&lt;/code&gt;: tag number 为 1，布尔类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INTEGER&lt;/code&gt;: tag number 为 2，任意精度的整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BIT STRING&lt;/code&gt;: tag number 为 3，任意长度的比特串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OCTET STRING&lt;/code&gt;: tag number 为 4，任意长度的字节串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;: tag number 为 5&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OBJECT IDENTIFIER(OID)&lt;/code&gt;: tag number 为 6，&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_identifier&#34;&gt;对象标识符&lt;/a&gt;，用于为各种“东西”／“概念”起一个唯一的标识符，由机构 ITU 和 ISO/IEC 标准化；其具体形式类似于域名的多级树状结构，子级对象从属于父对象，只是每一级由一个整数表示，例如：

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1&#34;&gt;1&lt;/a&gt; 表示的是 iso&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2&#34;&gt;1.2&lt;/a&gt; member-body，ISO member bodies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840&#34;&gt;1.2.840&lt;/a&gt; us，美国&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549&#34;&gt;1.2.840.113549&lt;/a&gt; rsadsi，即 RSA Security LLC 公司&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549.1&#34;&gt;1.2.840.113549.1&lt;/a&gt; pkcs，即 RSA 公司制定的 Public-Key Cryptography Standards (PKCS) 系列标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549.1.1&#34;&gt;1.2.840.113549.1.1&lt;/a&gt; pkcs-1，即 PKCS#1 标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549.1.1.13&#34;&gt;1.2.840.113549.1.1.13&lt;/a&gt; sha512WithRSAEncryption&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTF8 STRING&lt;/code&gt;: tag number 为 12&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SEQUENCE 和 SEQUENCE OF&lt;/code&gt;: tag number 为 16，有序的结构体和列表（不明白为什么不区分两个 tag 呢？）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SET 和 SET OF&lt;/code&gt;: tag number 为 17，无序的结构体和列表（继续不明白为什么不区分两个 tag）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PrintableString&lt;/code&gt;: tag number 为 19（有了 &lt;code&gt;OCTET STRING&lt;/code&gt; 为什么还要区分这个呢？）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IA5String&lt;/code&gt;: tag number 为 22，大致等价于 ASCII 字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTCTIME&lt;/code&gt;: tag number 为 23&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;application&lt;/strong&gt;，这一类别的 tag 的意义由某应用内定义，对不同的应用来说，即使相同的 tag number 对应的是不同的含义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private&lt;/strong&gt;，这一类别的 tag 的意义由某企业或组织定义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context-specific&lt;/strong&gt;，这一类别的 tag 主要用于在特定的上下文中里解决歧义问题，例如某个 SEQUENCE 类型里面包含了两个相邻的可缺省的 INTEGER 字段，假如编码过后只传来一个整数（另外一个取缺省值），那究竟这个值是属于哪个字段呢？这时候就需要给这两个字段封装成新的 tagged 类型加以区分&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ber-basic-encoding-rules-简介&#34;&gt;BER (Basic Encoding Rules) 简介&lt;/h4&gt;

&lt;p&gt;BER 对数据的编码一般由以下三（或四）个部件按顺序构成，常简称 &lt;strong&gt;TLV&lt;/strong&gt; (Type-Length-Value)：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Identifier octets&lt;/strong&gt;（T）：用于编码这个数据的类型／tag&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length octets&lt;/strong&gt;（L）：用于编码数据的长度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contents octets&lt;/strong&gt;（V）：实际数据的编码，长度可以为 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;End-of-contents octets&lt;/strong&gt;（optional）：有些数据在编码时还不知道具体长度，例如流数据，这个时候需要有一个结束标志&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Identifier octets&lt;/strong&gt; 对类型的编码使用 1+ 个字节，第一个字节编码包括 tag class，primitive 标识位（&lt;strong&gt;注意：这个标识位是用来标识数据编码时的方法，跟上边所说的 simple／structured／&amp;hellip; 类型分类没有太大关系&lt;/strong&gt;），以及 tag number ：小于等于 30 的 tag number 直接编码在第一个字节；对于更大的 tag number，第一字节写死 31，并用后续字节的低 7 位编码实际 tag number，后续字节的最高位设为 1，除了最后一个设为 0 用以标识结束；整理图示如下：&lt;/p&gt;

&lt;a href=&#34;./asn1-ber-identifier-octets.png&#34;&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; src=&#34;./asn1-ber-identifier-octets.png&#34; alt=&#34;Public Key Cryptography 笔记（2.1）-- ASN.1 ./asn1-ber-identifier-octets.png&#34;&gt;&lt;/a&gt;


&lt;p&gt;&lt;strong&gt;Length octets&lt;/strong&gt; 对实际数据的长度进行编码，有三种形式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;确定长度短形式，可编码 &lt;span&gt;\([0, 127]\)&lt;/span&gt;
，仅需要一个字节编码&lt;/li&gt;
&lt;li&gt;确定长度长形式，可编码 &lt;span&gt;\([0, 2^{8\times126}-1]\)&lt;/span&gt;
，需要两个到127个字节编码&lt;/li&gt;
&lt;li&gt;不确定长度形式，用于在编码阶段无法确定长度的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体方法整理如下图：&lt;/p&gt;

&lt;a href=&#34;./asn1-ber-length-octets.png&#34;&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; src=&#34;./asn1-ber-length-octets.png&#34; alt=&#34;Public Key Cryptography 笔记（2.1）-- ASN.1 ./asn1-ber-length-octets.png&#34;&gt;&lt;/a&gt;


&lt;p&gt;&lt;strong&gt;Content octets&lt;/strong&gt; 不同类型的数据编码方式各异，见下面分述&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;End-of-Content octets&lt;/strong&gt; 对于不确定长度的复合类型数据，在最后需要有一个结束标识 &lt;code&gt;00 00&lt;/code&gt; （两个值为 0 的字节），这其实就是一个 &lt;code&gt;End-of-Content&lt;/code&gt; 类型的数据的 BER 编码：因为它是 universal 中 tag number 为 0 的，且它没有数据，所以 length-octets 为 0&lt;/p&gt;

&lt;h4 id=&#34;der-distinguished-encoding-rules-简介&#34;&gt;DER (Distinguished Encoding Rules) 简介&lt;/h4&gt;

&lt;p&gt;DER 其实是 BER 的一个严格子集（即任意 DER 编码的数据都是合法的 BER 编码，但反之则未必），它要求对数据只能有唯一一种编码方式，这样做的原因是例如在创建数字签名的时候，同一份数据假如用 BER 里不同的编码方式（例如长度可以用长模式或短模式），那么会产生不一样的签名结果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/X.690#DER_encoding&#34;&gt;wiki&lt;/a&gt; 上列出一些最显著的一些限制规则，如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只能使用确定形式来编码长度，且必须使用最短的编码形式（如长度若小于等于 127，则必须使用短形式）&lt;/li&gt;
&lt;li&gt;各种 string 类型必须使用 primitive 的编码方式&lt;/li&gt;
&lt;li&gt;SET 类型（无序结构体）里的字段需要按照 tag 值的大小排序进行编码（排序了就唯一了）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;一些类型的记法及编码方式&#34;&gt;一些类型的记法及编码方式&lt;/h4&gt;

&lt;p&gt;以下基本翻译自：&lt;a href=&#34;http://luca.ntop.org/Teaching/Appunti/asn1.html&#34;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt; 第五节&lt;/p&gt;

&lt;h5 id=&#34;integer&#34;&gt;INTEGER&lt;/h5&gt;

&lt;p&gt;tag number 为 2，整数类型可以是正／负的任意精度整数。 记法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INTEGER [ &#39;{&#39; identifier1(value1) ... identifiern(valuen) &#39;}&#39; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;identifier1&lt;/code&gt; &amp;hellip; &lt;code&gt;identifiern&lt;/code&gt; 如果有的话，这些标识符将绑定其对应的整数值，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Version ::= INTEGER { v1988(0) }

...

Certificate ::= ...
  version Version DEFAULT v1988,
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是 X.509 里头的版本类型，定义了 &lt;code&gt;v1988&lt;/code&gt; 这个标识符，其值为 0；证书类型里头的版本默认即为这个值。&lt;/p&gt;

&lt;p&gt;BER 编码是 primitive 方式，使用&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%A3%9C%E6%95%B8&#34;&gt;补码&lt;/a&gt; 来编码此整数，如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0: &lt;code&gt;02 01 00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;127: &lt;code&gt;02 01 7f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;128: &lt;code&gt;02 02 00 80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-128: &lt;code&gt;02 01 80&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;bit-string&#34;&gt;BIT STRING&lt;/h5&gt;

&lt;p&gt;tag number 为 3，比特串可以表示任意长度（包括0）的 0 和 1。记法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BIT STRING
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如 X.509 的 SubjectPublicKeyInfo：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SubjectPublicKeyInfo ::= SEQUENCE {
    algorithm AlgorithmIdentifier,
    publicKey BIT STRING
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BER 编码方式可以是 primitive 或者 constructed 的，DER 只允许 primitive 编码方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primitive 编码方式：由于 bit string 可以是任意长度，不一定是 8 的整数倍，所以第一字节编码最后一个字节中填充的比特数（0～7），BER 填充比特可以是任意东西，但 DER 则只允许填充 0&lt;/li&gt;
&lt;li&gt;constructed 编码方式：这种编码方式把原来的一个 BIT STRING 分解成多个字串，分别编码之并串联起来；字串中除了最后一个，长度都必须是 8 的整数倍&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如对 &lt;code&gt;011011100101110111&lt;/code&gt; 进行编码（长度为 18，&lt;code&gt;01101110-01011101-11 (bin)&lt;/code&gt; &lt;code&gt;6e 5d c0 (hex)&lt;/code&gt;，填充 6 位）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DER 编码：&lt;code&gt;03 04 06 6e 5d c0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BER constructed 方式编码：把原比特串划分成 &lt;code&gt;01101110-01011101&lt;/code&gt; 和 &lt;code&gt;11&lt;/code&gt; 分别编码得 &lt;code&gt;03 03 00 6e 5d&lt;/code&gt; 和 &lt;code&gt;03 02 06 c0&lt;/code&gt;，这两子串一共 9 字节，故最终编码为：&lt;code&gt;23 09 03 03 00 6e 5d 03 02 06 c0&lt;/code&gt;。（注意：第一个字节变成了 23，这是因为 primitive 标识位为 1）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;octet-string&#34;&gt;OCTET STRING&lt;/h5&gt;

&lt;p&gt;tag number 为 4，任意长度的字节串，记法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OCTET STRING [ SIZE &#39;(&#39; size | size1 &#39;..&#39; size2 &#39;)&#39; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SIZE(size)&lt;/code&gt; 形式的表示字节串长度为 size，&lt;code&gt;SIZE(size1..size2)&lt;/code&gt; 形式的表示字符串长度需要在 size1 和 size2 之间，没有 &lt;code&gt;SIZE&lt;/code&gt; 后缀的表示字符串可以任意长度。&lt;/p&gt;

&lt;p&gt;BER 编码方式可以是 primitive 或者 constructed 的，constructed 编码方式类似 BIT STRING 一样由子串串联而成；DER 只允许 primitive 编码方式&lt;/p&gt;

&lt;h5 id=&#34;sequence&#34;&gt;SEQUENCE&lt;/h5&gt;

&lt;p&gt;tag number 为 16，相当于 c 语言中的 struct，记法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SEQUENCE {
    [identifier1] Type1 [ &#39;{&#39; ( &#39;OPTIONAL&#39; | &#39;DEFAULT&#39; value1 ) &#39;}&#39; ],
    ...,
    [identifiern] Typen [ &#39;{&#39; ( &#39;OPTIONAL&#39; | &#39;DEFAULT&#39; valuen ) &#39;}&#39; ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;identifierx&lt;/code&gt; 是字段名，主要起到名称作用所以可以不写；&lt;code&gt;Typex&lt;/code&gt; 则是对应字段的类型；字段如果带上 &lt;code&gt;OPTIONAL&lt;/code&gt; 表明此字段可以为空，如果带上 &lt;code&gt;DEFAULT valuex&lt;/code&gt; 同样表明此字段可以为空且有缺省值；相邻几个字段如果都是 &lt;code&gt;OPTIONAL&lt;/code&gt; 或者 &lt;code&gt;DEFAULT&lt;/code&gt; 的话，那么这几个字段以及后续的那个字段必须拥有不同的 tag 以避免歧义&lt;/p&gt;

&lt;p&gt;编码方式为 structured，字段按顺序编码串联而成；当某个字段空时，不用编码这个字段；假如刚好这个字段的值跟缺省值相同时，BER 编码可以也可以不包含此字段，DER 编码则不包含此字段&lt;/p&gt;

&lt;p&gt;例子，摘自 &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One#Example&#34;&gt;wiki&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FooQuestion ::= SEQUENCE {
    trackingNumber INTEGER,
    question       IA5String
}

myQuestion FooQuestion ::= {
    trackingNumber     5,
    question           &amp;quot;Anybody there?&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编码为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;30 — type tag indicating SEQUENCE
13 — length in octets of value that follows
02 — type tag indicating INTEGER
01 — length in octets of value that follows
05 — value (5)
16 — type tag indicating IA5String 
     (IA5 means the full 7-bit ISO 646 set, including variants, 
      but is generally US-ASCII)
0e — length in octets of value that follows
41 6e 79 62 6f 64 79 20 74 68 65 72 65 3f — value (&amp;quot;Anybody there?&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;sequence-of&#34;&gt;SEQUENCE OF&lt;/h5&gt;

&lt;p&gt;相当于 c 中的 array，列表中的数据都是同一个类型的，编码方式跟 SEQUENCE 是一样的，只是记法不一样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SEQUENCE OF Type
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;set&#34;&gt;SET&lt;/h5&gt;

&lt;p&gt;tag number 是 17，字段无序的结构体，记法类似于 SEQUENCE，编码方式也类似于它，另有一个要求是字段必须有不一样的 tag number，DER 编码时字段按 tag number 排序&lt;/p&gt;

&lt;h5 id=&#34;set-of&#34;&gt;SET OF&lt;/h5&gt;

&lt;p&gt;类似于 SEQUENCE OF，只是是无序的，DER 编码时按照各个字段 BER 编码后的字串排序&lt;/p&gt;

&lt;h5 id=&#34;tagged-types&#34;&gt;Tagged types&lt;/h5&gt;

&lt;p&gt;tagged types 如前所述是对现有类型的封装，赋予新的 tag 成为新的类型。有两种 tagged 类形：&lt;code&gt;IMPLICIT&lt;/code&gt; 和 &lt;code&gt;EXPLICIT&lt;/code&gt;，只是编码方式不一样，记法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;[&#39; [ class ] number &#39;]&#39; [ &#39;IMPLICIT&#39; | &#39;EXPLICIT&#39; ] Type

class = &#39;UNIVERSAL&#39; | &#39;APPLICATION&#39; | &#39;PRIVATE&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Image ::= SEQUENCE {
    width  [0] INTEGER OPTIONAL,
    height [1] INTEGER OPTIONAL,
    data   OCTET STRING
}

myImage Image ::= {
    width 100,
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里 &lt;code&gt;width&lt;/code&gt; 字段的原类型是 &lt;code&gt;INTEGER OPTIONAL&lt;/code&gt;，&lt;code&gt;[0]&lt;/code&gt; 表明这个 tagged 类型的 tag number 为 0，又因为 class 没指定，默认为 context-specific，而由于也没有指定 IMPLICIT 还是 EXPLICIT，默认是 EXPLICIT&lt;/p&gt;

&lt;p&gt;编码方式，对于 EXPLICIT tagged 类型，采用 constructed 编码方式，就像 SEQUENCE 一样，原类型数据则作为唯一一个字段进行编码。如上述例子对 width 的编码为：&lt;code&gt;a0 (10-1-00000) 03 02 01 64&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对于 IMPLICIT tagged 类型的话，则只是把原类型数据的 tag 换成新的 tag，所以可能是 primitive 也可以能是 constructed 编码方式，length-octets 跟 content-octets 都不变&lt;/p&gt;

&lt;p&gt;对比两种 tagged 类型，EXPLICIT 更为完整，接收方可以立即解码出原类型数据；而 IMPLICIT 类型的编码更短，但接收方必须知道原类型才能解码出数据&lt;/p&gt;

&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://luca.ntop.org/Teaching/Appunti/asn1.html&#34;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/X.690#BER_encoding&#34;&gt;https://en.wikipedia.org/wiki/X.690#BER_encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.obj-sys.com/asn1tutorial/asn1only.html&#34;&gt;https://www.obj-sys.com/asn1tutorial/asn1only.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>