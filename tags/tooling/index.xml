<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tooling on Coder Papa</title>
    <link>https://huangjunwen.github.io/tags/tooling/</link>
    <description>Recent content in tooling on Coder Papa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 19 Feb 2022 09:24:49 +0000</lastBuildDate><atom:link href="https://huangjunwen.github.io/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>新博客</title>
      <link>https://huangjunwen.github.io/posts/2022/new-blog/</link>
      <pubDate>Sat, 19 Feb 2022 09:24:49 +0000</pubDate>
      
      <guid>https://huangjunwen.github.io/posts/2022/new-blog/</guid>
      <description>花了相当相当多时间重新建设自己的内容管理系统，总算大致完成（https://github.com/huangjunwen/mdtool），记录一下
需求 大致如下
内容应该可以很容易跨平台发布，例如除了本身作为博客的网站外，也能发布到微信公众号或其他内容平台， 甚至可以单独输出成文档 写作时要有实时反馈 内容使用的格式不能过于依赖专有或特定软件 仅使用开源工具 格式 Markdown 熟悉，简单，广泛应用
https://www.markdownguide.org/basic-syntax/ https://www.markdownguide.org/extended-syntax/ Tex 功能强大，表达丰富，不过需要些时间学习；另外 markdown 中也可以嵌入 math mode 的公式，这已经解决很大一部分问题了
Svg 缩放无损，文本可编辑，众多编辑器可用1，可 apply css
PNG 普遍支持
工具 Hugo 速度快，编辑即可看到效果
Pandoc pandoc 也是可以作为 hugo 的 markdown 渲染引擎的 2，用它有多个好处
能识别 latex 式的 math mode（$...$/$$...$$） 可以写 filter！用 外部程序 或者 lua 脚本 直接修改 pandoc 的 ast pandoc 本身就是用来转换格式的（e.g. markdown -&amp;gt; pdf） 更多扩展 整合 整合起来就是：内容为 markdown 格式，尽量少使用专有的扩展，pandoc 负责将其转换格式，其中最主要的 html 格式则交由 mdtool（hugo + js + css）进一步处理及呈现</description>
    </item>
    
    <item>
      <title>写了一个 MySQL 数据表和查询的 go 代码生成器</title>
      <link>https://huangjunwen.github.io/posts/2018/sqlw-mysql/</link>
      <pubDate>Mon, 10 Sep 2018 20:51:26 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/posts/2018/sqlw-mysql/</guid>
      <description>项目地址 https://github.com/huangjunwen/sqlw-mysql
动机 最近这段时间开始用 go 写网站，遇到各种新老问题。其中一个老问题是如何访问 MySQL 数据库。
使用 ORM (Object Relationship Mapping) 大致浏览了一些热门的实现，感觉不是很合眼缘，跟动态语言的实现（例如 SQLAlchemy ）差不少。
ORM 的特点在于使用程序员熟悉的对象概念抽象数据库关系，使之成为可编程的对象，提供使用上的便利：
构造查询的便利，用户一般只需要指定需要查询的对象（一般对应数据库表），或者关系（一般对应 JOIN），还可以按需要增添查询条件，ORM 即可推导出需要执行的语句： sess.query(User) # SELECT user.id, ... FROM user sess.query(Employee.User) # SELECT employee.id, ... FROM employee JOIN user ON ... sess.query(User).filter(User.name==xxx) # SELECT user.id, ... FROM user WHERE name=xxx sess.query(User).options(joinedload(Employee)).order_by(...) # ... 查询后的便利，结果集会被重新组装成对象，后续仍只需继续在这些对象上操作即可。 这样理想状态下涉及数据库的操作就被完全封装到一个闭环里头。然而数据库关系其实并不简单，建立一个表达力十足的映射模型即是使用 python 这种表达力很强的动态语言都很复杂（看看这个函数），何况 go 这种既缺乏元编程能力也缺乏语法糖的语言呢。
因此我所见的实现往往只能退而求其次，只实现一些基本常用的功能。
直接使用 SQL 除了使用 ORM 另外一种方法是直接面对关系数据库/SQL 本身，例如有很多人（声称）直接使用 sqlx，但我感觉全部手写会不会也挺麻烦重复的呢？
所以有一些工具能帮忙生成代码，例如 xo，连接上数据库直接导出 schema 就能生成基本的 CRUD 访问代码，同时也可以根据它的 SQL DSL 生成 SQL 的 wrapper code。整个过程一目了然，没有层层封装的不透明感，生成代码的效率也高，虽然需要手写 SQL，但代码生成过程是经过实际数据库验证的，这就相当可靠了。</description>
    </item>
    
  </channel>
</rss>
