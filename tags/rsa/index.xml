<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jayven@dev</title>
    <link>https://huangjunwen.github.io/tags/rsa/index.xml</link>
    <description>Recent content on Jayven@dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2016~2018 &lt;a href=&#34;mailto:kassarar@gmail.com&#34;&gt;Huang JunWen&lt;/a&gt;; All rights reserved.</copyright>
    <atom:link href="https://huangjunwen.github.io/tags/rsa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Public Key Cryptography 笔记（2）-- 存储格式和标准</title>
      <link>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-format-and-standard/</link>
      <pubDate>Thu, 26 Jan 2017 17:43:37 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-format-and-standard/</guid>
      <description>

&lt;h3 id=&#34;rsa-on-disk&#34;&gt;RSA on disk&lt;/h3&gt;

&lt;p&gt;如前所描述，RSA 的公私钥实际上就是些数字，但我们平时实际使用的是 .pem 格式（或 .der）的 key 。&lt;/p&gt;

&lt;p&gt;.pem 格式头部和尾部的有一些标识符（&lt;code&gt;-----BEGIN XXXX-----&lt;/code&gt;）这些是为了让 parser 可以马上知道这个文件包含的是公钥私钥，或是证书等。&lt;/p&gt;

&lt;p&gt;中间的数据其实是 base64 编码过后的 &lt;a href=&#34;https://en.wikipedia.org/wiki/X.690#DER_encoding&#34;&gt;DER（Distinguished Encoding Rules）&lt;/a&gt; 编码的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;ASN.1（Abstract Syntax Notation One）&lt;/a&gt; 数据。&lt;/p&gt;

&lt;p&gt;写个程序验证以下（dec.py）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

import sys
from base64 import b64decode
from pyasn1.codec.der.decoder import decode as der_decode

def read_pem(f, asn1Spec=None):

    return der_decode(
        b64decode(
            &#39;&#39;.join([line.strip() for line in f if not line.startswith(&#39;-----&#39;)])
        ), asn1Spec=asn1Spec
    )

obj, _ = read_pem(open(sys.argv[1]))

print obj.prettyPrint()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找一个 rsa private key 来跑一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./dec.py ca-key.pem
Sequence:
 &amp;lt;no-name&amp;gt;=0
 &amp;lt;no-name&amp;gt;=893023574113042040269634126903705690958192000367515749793690532339562261663040768984677949208969821111506076369919400865801870985710613745908260652498336371620343220418005606803657105824685015775676961140056140842104922723725658584469937036979589039943318206308234450689935285531106176400784666850060612721223693026581160586984891869615299748396327063287952075098361379463194619694679249727200666343866879641226753061213723029674074572257689929441761207652940540816182884905731304910753429627574542805302378789826317425085431344299593860348296475098275788724990249961382297055893837789210216811880295130941496086631466846898230102127302757337004369112580595622821486216735822235200640222222944221601570231272966140106941857253100312153098428839206633396871491965363584739634413789118376819458819246161914101471359882766752512369669989338842342284961310600856321697107602376430660404437017714184604092513856991285419405296956080590982024711058544298854586244916166800299716510005045028393869316903124931993350151904669792718044403523729143307225465547206325525108357699688142798085183620461364419641399258446567984823312671315017896056518369422953112217687200988245732031363722479836324436839592416038603174283616122293984715039728219
 &amp;lt;no-name&amp;gt;=65537
 &amp;lt;no-name&amp;gt;=.....
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASN.1 中 Sequence 相当于一般语言里的 struct，所以这个 private key 里是一个结构体，包含七八个数字，但所有字段名字都是 &lt;code&gt;&amp;lt;no-name&amp;gt;&lt;/code&gt;，这是因为没有指定 specifiction。&lt;/p&gt;

&lt;p&gt;修改一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ...
from pyasn1_modules import rfc2437

# ...
obj, _ = read_pem(open(sys.argv[1]), asn1Spec=rfc2437.RSAPrivateKey())
# ...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新运行一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./dec.py ca-key.pem
RSAPrivateKey:
 version=0
 modulus=893023574113042040269634126903705690958192000367515749793690532339562261663040768984677949208969821111506076369919400865801870985710613745908260652498336371620343220418005606803657105824685015775676961140056140842104922723725658584469937036979589039943318206308234450689935285531106176400784666850060612721223693026581160586984891869615299748396327063287952075098361379463194619694679249727200666343866879641226753061213723029674074572257689929441761207652940540816182884905731304910753429627574542805302378789826317425085431344299593860348296475098275788724990249961382297055893837789210216811880295130941496086631466846898230102127302757337004369112580595622821486216735822235200640222222944221601570231272966140106941857253100312153098428839206633396871491965363584739634413789118376819458819246161914101471359882766752512369669989338842342284961310600856321697107602376430660404437017714184604092513856991285419405296956080590982024711058544298854586244916166800299716510005045028393869316903124931993350151904669792718044403523729143307225465547206325525108357699688142798085183620461364419641399258446567984823312671315017896056518369422953112217687200988245732031363722479836324436839592416038603174283616122293984715039728219
 publicExponent=65537
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整的定义是在 &lt;a href=&#34;https://en.wikipedia.org/wiki/PKCS_1&#34;&gt;PKCS#1&lt;/a&gt; 标准中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RSAPrivateKey ::= SEQUENCE {
  version           Version,
  modulus           INTEGER,  -- n
  publicExponent    INTEGER,  -- e
  privateExponent   INTEGER,  -- d
  prime1            INTEGER,  -- p
  prime2            INTEGER,  -- q
  exponent1         INTEGER,  -- d mod (p-1)
  exponent2         INTEGER,  -- d mod (q-1)
  coefficient       INTEGER,  -- (inverse of q) mod p
  otherPrimeInfos   OtherPrimeInfos OPTIONAL
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 modulus/publicExponent/privateExponent 即模／公钥幂／私钥幂，可以看到实际中的 RSA 私钥也是包含 publicExponent 的；所以这就是为什么 openssl 工具中能从私钥中导出公钥的原因。&lt;/p&gt;

&lt;p&gt;剩下的其它参数则是使用中国剩余定理加速计算而预先计算好的参数。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://luca.ntop.org/Teaching/Appunti/asn1.html&#34;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf&#34;&gt;https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem&#34;&gt;https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crypto.stackexchange.com/questions/1729/why-does-the-pkcs1-rsa-private-key-structure-contain-more-than-just-exponent-and&#34;&gt;http://crypto.stackexchange.com/questions/1729/why-does-the-pkcs1-rsa-private-key-structure-contain-more-than-just-exponent-and&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16899247/how-can-i-decode-a-ssl-certificate-using-python&#34;&gt;http://stackoverflow.com/questions/16899247/how-can-i-decode-a-ssl-certificate-using-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Public Key Cryptography 笔记（1）-- RSA</title>
      <link>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-1-rsa/</link>
      <pubDate>Tue, 24 Jan 2017 11:52:55 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-1-rsa/</guid>
      <description>

&lt;script type=&#34;text/javascript&#34; async src=&#34;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;&lt;/script&gt;


&lt;p&gt;这一系列的笔记主要是对学习到的公钥加密体系知识的记录和梳理，主要以 RSA 算法为代表，以及从中衍生开去的各种应用：ssl/tls，ssh，gpg 等等我们每天都依赖的东西。&lt;/p&gt;

&lt;h3 id=&#34;rsa-主要原理&#34;&gt;RSA 主要原理&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&#34;&gt;RSA&lt;/a&gt; 的原理是在于能够找到三个很大的正整数 &lt;span&gt;\(e,d,n\)&lt;/span&gt;
 使得对于任何 &lt;span&gt;\(0\le{m}\lt{n}\)&lt;/span&gt;
：&lt;/p&gt;

&lt;span&gt;$$(m^e)^d\equiv m\pmod{n}$$&lt;/span&gt;


&lt;p&gt;其中公钥为 &lt;span&gt;\((n,e)\)&lt;/span&gt;
，可以发送给任何人；私钥为 &lt;span&gt;\((n,d)\)&lt;/span&gt;
，只能由所有者掌握。RSA 支持 4 种操作：加密／解密，签名／验证签名。&lt;/p&gt;

&lt;h4 id=&#34;加密&#34;&gt;加密&lt;/h4&gt;

&lt;p&gt;首先用一些编码手段把需要加密的信息转换成整数 &lt;span&gt;\(m\)&lt;/span&gt;
 ，用公钥中的两个参数计算&lt;/p&gt;

&lt;span&gt;$$c=m^e\pmod{n}$$&lt;/span&gt;


&lt;p&gt;&lt;span&gt;\(c\)&lt;/span&gt;
 就是加密后的信息了。&lt;/p&gt;

&lt;h4 id=&#34;解密&#34;&gt;解密&lt;/h4&gt;

&lt;p&gt;中学知识温习时间：&lt;/p&gt;

&lt;span&gt;$$ab\pmod{n}\\=(xn&amp;#43;a_r)(yn&amp;#43;b_r)\pmod{n}\\={a_r}{b_r}\pmod{n}\\=(a\pmod{n})(b\pmod{n})\pmod{n}$$&lt;/span&gt;


&lt;p&gt;所以：&lt;/p&gt;

&lt;span&gt;$$x^y\pmod{n}\\=(xx...x)\pmod{n}\\=(x\pmod{n})(x\pmod{n})...\pmod{n}\\=(x\pmod{n})^y\pmod{n}$$&lt;/span&gt;


&lt;p&gt;即在模运算中，只要算余数就可以了。&lt;/p&gt;

&lt;p&gt;由私钥所有者计算&lt;/p&gt;

&lt;span&gt;$$c^d\pmod{n}=(m^e\pmod{n})^d\pmod{n}=(m^e)^d\pmod{n}=m\pmod{n}$$&lt;/span&gt;


&lt;p&gt;就能还原原来的信息了。&lt;del&gt;（数学差真啰嗦啊。。。）&lt;/del&gt;&lt;/p&gt;

&lt;h4 id=&#34;签名&#34;&gt;签名&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;首先对要签名的信息作一个 &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographic_hash_function&#34;&gt;message digest&lt;/a&gt;，常用的如 MD5 和 SHA 系列；&lt;/li&gt;
&lt;li&gt;然后把这个 digest 转换成整数 &lt;span&gt;\(m\)&lt;/span&gt;
 使得 &lt;span&gt;\(1\le{m}\lt{n}\)&lt;/span&gt;
；&lt;/li&gt;
&lt;li&gt;最后用私钥 &lt;span&gt;\((n,d)\)&lt;/span&gt;
 计算 &lt;span&gt;\(s=m^d\pmod{n}\)&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;验证签名&#34;&gt;验证签名&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;用公钥 &lt;span&gt;\((n,e)\)&lt;/span&gt;
 计算 &lt;span&gt;\(v=s^e\pmod{n}\)&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;把 &lt;span&gt;\(v\)&lt;/span&gt;
 转换回 digest&lt;/li&gt;
&lt;li&gt;独立对要签名的信息再作一次 digest&lt;/li&gt;
&lt;li&gt;对比这两个 digest，如果相同的话，那这个签名就是有效的&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;小结&#34;&gt;小结&lt;/h4&gt;

&lt;p&gt;可以看到加解密和签名验签刚好是两个方向：前者是公钥加密发送给所有者解密，后者是用私钥签名发送给其他人用公钥验签；所以这就是为何一般&lt;a href=&#34;http://www.di-mgt.com.au/rsa_alg.html#weaknesses&#34;&gt;不建议使用相同的 key 同时用作加密和签名&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Using the same key for encryption and signing
Given that the underlying mathematics is the same for encryption and signing, only in reverse, if an attacker can convince a key holder to sign an unformatted encrypted message using the same key then she gets the original.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实际算法&#34;&gt;实际算法&lt;/h3&gt;

&lt;p&gt;包括 key 的生成算法，计算时的优化，对信息的编码等，以及 RSA 的数学上的证明；有兴趣可以看一下下面参考的链接，稍微摘录一些简单而重要的点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;计算 &lt;span&gt;\(y=x^e\pmod{n}\)&lt;/span&gt;
 （所谓 modular exponentiation）的复杂度大约为 &lt;span&gt;\(O(k^3)\)&lt;/span&gt;
，其中 &lt;span&gt;\(k\)&lt;/span&gt;
 是 &lt;span&gt;\(n\)&lt;/span&gt;
 的长度（例如 1024 bits），且当 &lt;span&gt;\(e\)&lt;/span&gt;
 的二进制表示中 1 的数量越多则越慢。&lt;/li&gt;
&lt;li&gt;公钥幂 &lt;span&gt;\(e\)&lt;/span&gt;
 一般选取固定的：例如
&lt;span&gt;$$3=2^{2^0}&amp;#43;1\\5=2^{2^1}&amp;#43;1\\17=2^{2^2}&amp;#43;1\\257=2^{2^3}&amp;#43;1\\65537=2^{2^4}&amp;#43;1$$&lt;/span&gt;

这5个是前五个 fermat number：&lt;span&gt;\(F_x=2^{2^x}&amp;#43;1\)&lt;/span&gt;
 ，恰好都是素数，但 &lt;span&gt;\(F_5\)&lt;/span&gt;
 以及后面的 fermat number 不是素数。显然这些数字的二进制表示只有两个 1，如上述原因，在加密的过程中能节省计算时间。实际应用中一般都是使用 65537 ，因为小的 &lt;span&gt;\(e\)&lt;/span&gt;
 不太安全。&lt;/li&gt;
&lt;li&gt;模 &lt;span&gt;\(n\)&lt;/span&gt;
 一般是由两个( &lt;span&gt;\(n=pq\)&lt;/span&gt;
 )或更多个随机产生（且满足一些数学条件）的大素数（所谓 &amp;ldquo;multi-prime&amp;rdquo; RSA）相乘而得。&lt;/li&gt;
&lt;li&gt;私钥幂 &lt;span&gt;\(d\)&lt;/span&gt;
 是从模 &lt;span&gt;\(n\)&lt;/span&gt;
 的因子（&lt;span&gt;\(p,q\)&lt;/span&gt;
）以及 &lt;span&gt;\(e\)&lt;/span&gt;
 推导出来，由于模是公开的（公钥的一部分），故 RSA 的其中一个安全因素在于：&lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_factorization&#34;&gt;分解一个大数&lt;/a&gt;是困难的。&lt;/li&gt;
&lt;li&gt;多个素数相乘结果作为模的一个好处是可以更快速的计算 &lt;span&gt;\(m=c^d\pmod{n}\)&lt;/span&gt;


&lt;ul&gt;
&lt;li&gt;使用中国剩余定理（Chinese Remainder Theorem，CRT）可以把这个计算转换成对 &lt;span&gt;\(p,q\)&lt;/span&gt;
 的 modular exponentiation 计算，而 &lt;span&gt;\(p, q\)&lt;/span&gt;
 的长度都只有 &lt;span&gt;\(n\)&lt;/span&gt;
 的一半，所以复杂度会降低到原来的&lt;a href=&#34;http://www.di-mgt.com.au/crt_rsa.html#crtarithmetic&#34;&gt;四分之一&lt;/a&gt;：&lt;span&gt;\(O(2(\cfrac{k}{2})^3)=O(\cfrac{k^3}{4})\)&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.di-mgt.com.au/rsa_alg.html&#34;&gt;http://www.di-mgt.com.au/rsa_alg.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.di-mgt.com.au/rsa_theory.html&#34;&gt;http://www.di-mgt.com.au/rsa_theory.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>