<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>authen on Coder Papa</title>
    <link>http://127.0.0.1:1313/tags/authen/</link>
    <description>Recent content in authen on Coder Papa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 14 May 2017 19:14:51 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/tags/authen/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务中的认证 (authentication) 问题</title>
      <link>http://127.0.0.1:1313/posts/2017/authentication_in_microservice/</link>
      <pubDate>Sun, 14 May 2017 19:14:51 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/authentication_in_microservice/</guid>
      <description>这帖子有意思 JSON Web token vs. Session
“单纯”的 JWT，其实跟 client side session 没啥区别，它的优缺点都一样：
Pros：
 服务端不需要储存 session 数据 stateless 因为不用访问任何储存服务，验证过程超快速 易于 scale up  Cons:
 session 很难被主动清除（除非过期） 所有信息都暴露在外（或者有暴露的危险）  最终我觉得一个比较好的办法是结合这两者：对外使用 session，提供一个 opaque 的 token (reference token) 作为 session id，在网关中做翻译过程，将这个 reference token 转换成真实的 jwt，然后在网关内的服务就都使用 jwt。
见 muCon 2016: Authentication in Microservice Systems By David Borsos</description>
    </item>
    
  </channel>
</rss>
