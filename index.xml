<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coder Papa</title>
    <link>https://huangjunwen.github.io/</link>
    <description>Recent content on Coder Papa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 10 Sep 2018 20:51:26 +0800</lastBuildDate>
    
	<atom:link href="https://huangjunwen.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>写了一个 MySQL 数据表和查询的 go 代码生成器</title>
      <link>https://huangjunwen.github.io/post/2018/sqlw-mysql/</link>
      <pubDate>Mon, 10 Sep 2018 20:51:26 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2018/sqlw-mysql/</guid>
      <description>项目地址 https://github.com/huangjunwen/sqlw-mysql 动机 最近这段时间开始用 go 写网站，遇到各种新老问题。其中一个老问题是如何访问 MySQL 数据库。 使用 ORM (Object Relationship Mapping) 大致浏览了一些热门的实现，感觉不是</description>
    </item>
    
    <item>
      <title>Greenlet 笔记</title>
      <link>https://huangjunwen.github.io/post/2018/greenlet/</link>
      <pubDate>Thu, 15 Mar 2018 09:05:51 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2018/greenlet/</guid>
      <description>原理 我们知道，操作系统会给每一个线程分配一个独立的堆栈，它们各自独立运作，记录着该线程的各类运行状态：如函数本地变量，函数返回地址，寄存器状</description>
    </item>
    
    <item>
      <title>Vault Database Secret Backend 笔记</title>
      <link>https://huangjunwen.github.io/post/2017/vault-database-secret-backend/</link>
      <pubDate>Sat, 10 Jun 2017 16:46:36 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/vault-database-secret-backend/</guid>
      <description>在当前版本（v0.7.2）这个 backend 还处于 beta 状态；这个 backend 应该是用来统一之前版本中各种数据库的 secret backend 的；使用前需要挂载 vault mount database，这里用 MySQL</description>
    </item>
    
    <item>
      <title>Vault 笔记</title>
      <link>https://huangjunwen.github.io/post/2017/vault/</link>
      <pubDate>Wed, 07 Jun 2017 08:14:18 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/vault/</guid>
      <description>之前一篇 博文 介绍了 Hashicorp Vault 的解封／密封算法。这篇打算记录一下这个软件的其它方面。当前最新版本为 v0.7.2 。 Vault 是一个相当复杂的系统，总括而言，它是一个集中</description>
    </item>
    
    <item>
      <title>微服务中的认证 (authentication) 问题</title>
      <link>https://huangjunwen.github.io/post/2017/authentication_in_microservice/</link>
      <pubDate>Sun, 14 May 2017 19:14:51 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/authentication_in_microservice/</guid>
      <description>这帖子有意思 JSON Web token vs. Session “单纯”的 JWT，其实跟 client side session 没啥区别，它的优缺点都一样： Pros： 服务端不需要储存 session 数据 stateless 因为不用访问任何储存服务，</description>
    </item>
    
    <item>
      <title>Shamir&#39;s Secret Sharding</title>
      <link>https://huangjunwen.github.io/post/2017/shamir-secret-sharding/</link>
      <pubDate>Sun, 23 Apr 2017 09:27:43 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/shamir-secret-sharding/</guid>
      <description>Hashicorp 这家公司的产品都很有意思，其中 Vault 是一个用来集中管理敏感信息（密码，各种 token，证书，key 等等）的工具。 Vault server 运行起来之后有两种状态：s</description>
    </item>
    
    <item>
      <title>Public Key Cryptography 笔记（2.1）-- ASN.1</title>
      <link>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-1-asn1/</link>
      <pubDate>Wed, 01 Feb 2017 09:19:40 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-1-asn1/</guid>
      <description>记法和编码 ASN.1（Abstract syntax notation one） 是一个对数据（类型／值）的记法和编码的祖父级标准；制定几十年而依然健在且广泛使用。 对比一下</description>
    </item>
    
    <item>
      <title>Public Key Cryptography 笔记（2）-- 存储格式和标准</title>
      <link>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-format-and-standard/</link>
      <pubDate>Thu, 26 Jan 2017 17:43:37 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-format-and-standard/</guid>
      <description>RSA on disk 如前所描述，RSA 的公私钥实际上就是些数字，但我们平时实际使用的是 .pem 格式（或 .der）的 key 。 .pem 格式头部和尾部的有一些标识符（-----</description>
    </item>
    
    <item>
      <title>Public Key Cryptography 笔记（1）-- RSA</title>
      <link>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-1-rsa/</link>
      <pubDate>Tue, 24 Jan 2017 11:52:55 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2017/public-key-cryptography-notes-1-rsa/</guid>
      <description>这一系列的笔记主要是对学习到的公钥加密体系知识的记录和梳理，主要以 RSA 算法为代表，以及从中衍生开去的各种应用：ssl/tls，ssh，gpg 等</description>
    </item>
    
    <item>
      <title>用 iptables 来配置 port knocking</title>
      <link>https://huangjunwen.github.io/post/2016/port-knocking-using-iptables/</link>
      <pubDate>Tue, 20 Dec 2016 10:20:54 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2016/port-knocking-using-iptables/</guid>
      <description>对于正式环境的服务器来说，每当查看到 auth.log 里头那些撞大运的 ssh 登录尝试，心里总是有点惴惴不安的。虽然 public key authentication 号称安全，但是谁说得准呢？而且不知道配置</description>
    </item>
    
    <item>
      <title>免输入密码登录 mysql</title>
      <link>https://huangjunwen.github.io/post/2016/mysql-client-auto-login-without-password/</link>
      <pubDate>Sun, 18 Dec 2016 09:58:58 +0800</pubDate>
      
      <guid>https://huangjunwen.github.io/post/2016/mysql-client-auto-login-without-password/</guid>
      <description>对于一些 (古董) mysql 管理员来说，直接用 mysql client 连接生产环境的数据库进行操作是很常见的事情。 根据 Mysql 的 End-User Guidelines for Password Security： 在 command line 上用 -p xxxxx 直接指定</description>
    </item>
    
  </channel>
</rss>