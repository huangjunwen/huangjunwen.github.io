<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Type Theory 笔记 on Coder Papa</title>
    <link>https://huangjunwen.github.io/posts/notes/intro-tt/</link>
    <description>Recent content in Introduction to Type Theory 笔记 on Coder Papa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Oct 2023 11:54:06 +0000</lastBuildDate><atom:link href="https://huangjunwen.github.io/posts/notes/intro-tt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4. Type assignment versus typed terms</title>
      <link>https://huangjunwen.github.io/posts/notes/intro-tt/4/</link>
      <pubDate>Sun, 29 Oct 2023 11:54:06 +0000</pubDate>
      
      <guid>https://huangjunwen.github.io/posts/notes/intro-tt/4/</guid>
      <description>4.1 Untyped λ-calculus The power of \(\Lambda\) lies in the fact that you can solve recursive equations.
A recursive equation is a question of the following kind:
Is there a term \(M\) such that \[M \; x =_ {\beta} x \; M \; x\] … So, we have two expressions on either side of the \(=_ \beta\) sign, both containing an unknown \(M\) and we want to know whether a solution for \(M\) exists.</description>
    </item>
    
  </channel>
</rss>
