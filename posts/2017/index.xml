<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2017 on Coder Papa</title>
    <link>http://127.0.0.1:1313/posts/2017/</link>
    <description>Recent content in 2017 on Coder Papa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0800</lastBuildDate><atom:link href="http://127.0.0.1:1313/posts/2017/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vault Database Secret Backend</title>
      <link>http://127.0.0.1:1313/posts/2017/vault-database-secret-backend/</link>
      <pubDate>Sat, 10 Jun 2017 16:46:36 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/vault-database-secret-backend/</guid>
      <description>在当前版本（v0.7.2）这个 backend 还处于 beta 状态；这个 backend 应该是用来统一之前版本中各种数据库的 secret backend 的；使用前需要挂载 vault mount database，这里用 MySQL 来演示它的主要工作流程：
 写入数据库配置，路径在 database/config/$db_name ，主要参数有：  db_name 这个配置的名字 plugin_name 指定用何种数据库 driver plugin（mysql/postgres 等） connection_url 指定连接参数（注：这个连接参数是用来连数据库以创建用户的，需要有对应的权限） allowed_roles 指定的是允许哪些角色使用此配置（角色是啥下一步就会说明） 安全考虑：这个路径即使读权限也需要严格限制，因为它包含了相当高权限的数据库用户信息 例子：   $ export db_name=&amp;quot;test&amp;quot; $ export role_name=&amp;quot;test_reader&amp;quot; $ export plugin_name=&amp;quot;mysql-legacy-database-plugin&amp;quot; # mysql 有多个 plugin，它们的区别这是创建的数据库用户名最大长度不一样，因为不同版本用户名长度有变化 $ export connection_url=&amp;quot;root:password@tcp(127.0.0.1:3306)/&amp;quot; # 不要忘了最后的 / $ vault write database/config/$db_name \ &amp;gt; plugin_name=$plugin_name \ &amp;gt; connection_url=$connection_url \ &amp;gt; allowed_roles=&amp;quot;$role_name&amp;quot; ... The following warnings were returned from the Vault server: * Read access to this endpoint should be controlled via ACLs as it will return the connection details as is, including passwords, if any.</description>
    </item>
    
    <item>
      <title>Vault 介绍</title>
      <link>http://127.0.0.1:1313/posts/2017/vault/</link>
      <pubDate>Wed, 07 Jun 2017 08:14:18 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/vault/</guid>
      <description>之前一篇文章介绍了 Hashicorp Vault 的解封/密封算法。这篇打算记录一下这个软件的其它方面。当前最新版本为 v0.7.2 。
Vault 是一个相当复杂的系统，总括而言，它是一个集中管理各类敏感信息（如密码/Key/证书等等）的软件（服务）。Vault 采用类似 Unix “一切皆文件” 的方式组织及暴露各类信息：所有操作都是对某个路径的 read/write （实际上是对某个 HTTP 路径 POST/GET/LIST/DELETE 等） ，例如：
 /sys 目录下是各种配置路径，此目录不可被卸载，其下路径各有用途，如 /sys/seal 和 /sys/unseal 这两个路径是用来密封/解封 vault 的。 /secret 目录下挂载的是 Generic Secret Backend，用于存放一般用途的敏感信息，其下路径组织结构由用户自行决定，我们平时实际使用访问最多的应该也是这个。 … 更多目录路径说明可参看 API 文档  读取/写入的数据一般都是 JSON 格式。
Backends Vault 主要由几类 backends 合作组成：
Auth -&amp;gt; Secret -&amp;gt; Storage(Physical) -&amp;gt; Audit
认证 -&amp;gt; 实际操作 -&amp;gt; 落盘储存 -&amp;gt; 日志
Auth(entication) Backend Auth Backend 完成的是认证工作：访问者是谁。有多种可通过挂载添加，默认情况下它们会挂载在 auth/&amp;lt;type&amp;gt; 下，以下是其中一些认证方式：
 token 这个 Backend 是 Vault 的核心认证方式，默认挂载，不可卸载，非常重要，下一小节详细描述 userpass 用户名密码认证 github 用 Github 的认证服务 cert 用 tls 证书认证 approle TODO  Token （令牌） 对外部而言，顾名思义，有了令牌就能通行，它是访问者身份的象征；实际上，Vault 对外 API 中绝大部分（除了像 seal/unseal 这种）都需要令牌才能访问：访问的 HTTP 请求头部需要加上 X-Vault-Token: xxxxxx （命令行其实也是调用 HTTP API 的，Token 保存在 ~/.</description>
    </item>
    
    <item>
      <title>微服务中的认证 (authentication) 问题</title>
      <link>http://127.0.0.1:1313/posts/2017/authentication_in_microservice/</link>
      <pubDate>Sun, 14 May 2017 19:14:51 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/authentication_in_microservice/</guid>
      <description>这帖子有意思 JSON Web token vs. Session
“单纯”的 JWT，其实跟 client side session 没啥区别，它的优缺点都一样：
Pros：
 服务端不需要储存 session 数据 stateless 因为不用访问任何储存服务，验证过程超快速 易于 scale up  Cons:
 session 很难被主动清除（除非过期） 所有信息都暴露在外（或者有暴露的危险）  最终我觉得一个比较好的办法是结合这两者：对外使用 session，提供一个 opaque 的 token (reference token) 作为 session id，在网关中做翻译过程，将这个 reference token 转换成真实的 jwt，然后在网关内的服务就都使用 jwt。
见 muCon 2016: Authentication in Microservice Systems By David Borsos</description>
    </item>
    
    <item>
      <title>Shamir Secret Sharding</title>
      <link>http://127.0.0.1:1313/posts/2017/shamir-secret-sharding/</link>
      <pubDate>Sun, 23 Apr 2017 09:27:43 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/shamir-secret-sharding/</guid>
      <description>Hashicorp 这家公司的产品都很有意思，其中 Vault 是一个用来集中管理敏感信息（密码，各种 token，证书，key 等等）的工具。
Vault server 运行起来之后有两种状态：seal/unseal (密封/解封) ，这是因为：
Vault 的数据是加密储存在磁盘上的：由 encryption key 加密，这个 encryption key 是由 master key 加密储存在磁盘上，而 master key 是不存放在磁盘上。所以当 Vault server 刚启动时，由于 master key 未知，故 encryption key 以及实际数据都是无法被解密访问的，这种状态就称之为seal (密封) ，unseal(解封) 就是重建 master key 的过程。
由于 master key 太重要了，Vault 使用所谓的 Shamir’s Secret Sharing 算法把这个 master key 切分并分发给 n 个人，只有当这 n 个人里的最少 k 个人授权提供他们持有的部分，vault 才能重构出这个 master key，这个算法挺有趣，所以记录下来：
目标 密码 \(S\) 需要切分成 \(n\) 份： \(S_1, S_2, ... S_n\)，且满足以下：</description>
    </item>
    
    <item>
      <title>ASN.1</title>
      <link>http://127.0.0.1:1313/posts/2017/asn.1/</link>
      <pubDate>Wed, 01 Feb 2017 09:19:40 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/asn.1/</guid>
      <description>记法和编码 ASN.1（Abstract syntax notation one） 是一个对数据（类型/值）的记法和编码的祖父级标准；制定几十年而依然健在且广泛使用。
对比一下 JSON（Javascript Object Notation），JSON 中的记法和编码是等价的，即它的记法就是编码。
而 ASN.1 中记法和编码是不一样的，记法主要是为人类服务，用于描述，是抽象且实现无关的，例如 （摘自这里）：
AirlineFlight ::= SEQUENCE { airline IA5String, flight NumericString, seats SEQUENCE { maximum INTEGER, occupied INTEGER, vacant INTEGER }, airport SEQUENCE { origin IA5String, stop1 [0] IA5String OPTIONAL, stop2 [1] IA5String OPTIONAL, destination IA5String }, crewsize ENUMERATED { six (6), eight (8), ten (10) }, cancel BOOLEAN DEFAULT FALSE }. 而编码则是具体实现序列化以及反序列化的操作，ASN.1 有很多种编码方式，例如：
 Basic Encoding Rule (BER) Canonical Encoding Rules (CER) Distinguished Encoding Rules (DER) XML Encoding Rules (XER) Packed Encoding Rules (PER) …  这篇笔记主要记录 ASN.</description>
    </item>
    
    <item>
      <title>RSA 简介</title>
      <link>http://127.0.0.1:1313/posts/2017/rsa/</link>
      <pubDate>Tue, 24 Jan 2017 11:52:55 +0800</pubDate>
      
      <guid>http://127.0.0.1:1313/posts/2017/rsa/</guid>
      <description>主要算法简介 RSA 的原理是在于能够找到三个很大的正整数 \(e,d,n\) 使得对于任何 \(0 \le m \lt n\)：
\[ (m^e)^d \equiv m \pmod{n} \]
其中公钥为 \((n,e)\)，可以发送给任何人；私钥为 \((n,d)\)，只能由所有者掌握。RSA 支持 4 种操作：加密/解密，签名/验证签名。
加密 首先用一些编码手段把需要加密的信息转换成整数 \(m\)，用公钥中的两个参数计算
\[ c = m^e \pmod{n} \]
其中 \(c\) 就是加密后的信息了。
解密 由私钥所有者计算
\[ \begin{align} c^d \pmod{n} &amp;amp;= (m^e \pmod{n})^d \pmod{n} \\ &amp;amp;= (m^e)^d \pmod{n} \\ &amp;amp;= m \pmod{n} \end{align} \]
就能还原原来的信息了（乘积与其余数乘积同余，见同余命题 a）
签名 首先对要签名的信息作一个 message digest，常用的如 MD5 和 SHA 系列； 然后把这个 digest 转换成整数 \(m\) 使得 \(1 \le m \lt n\)； 最后用私钥 \((n,d)\) 计算 \(s = m^d \pmod{n}\)  验签 用公钥 \((n,e)\) 计算 \(v = s^e \pmod{n}\) 把 \(v\) 转换回 digest 独立对要签名的信息再作一次 digest 对比这两个 digest，如果相同的话，那这个签名就是有效的  Note 可以看到加解密和签名验签刚好是两个方向：前者是公钥加密发送给所有者解密，后者是用私钥签名发送给其他人用公钥验签；所以这就是为何一般不建议使用相同的 key 同时用作加密和签名：</description>
    </item>
    
  </channel>
</rss>
