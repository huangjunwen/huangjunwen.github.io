<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Jayven@dev</title>
    <link>//huangjunwen.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on Jayven@dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 01 Feb 2017 09:19:40 +0800</lastBuildDate>
    <atom:link href="//huangjunwen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Public Key Cryptography 笔记（2.1）-- ASN.1</title>
      <link>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-1-asn1/</link>
      <pubDate>Wed, 01 Feb 2017 09:19:40 +0800</pubDate>
      
      <guid>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-1-asn1/</guid>
      <description>

&lt;script type=&#34;text/javascript&#34; async src=&#34;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;&lt;/script&gt;


&lt;h4 id=&#34;记法和编码&#34;&gt;记法和编码&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;ASN.1（Abstract syntax notation one）&lt;/a&gt; 是一个对数据（类型／值）的记法和编码的&lt;del&gt;祖父级&lt;/del&gt;标准；制定几十年而依然健在且广泛使用。&lt;/p&gt;

&lt;p&gt;对比一下 &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON（Javascript Object Notation）&lt;/a&gt;，JSON 中的记法和编码是等价的，即它的记法就是编码。&lt;/p&gt;

&lt;p&gt;而 ASN.1 中记法和编码是不一样的，记法主要是为人类服务，用于描述，是抽象且实现无关的，例如（摘自&lt;a href=&#34;https://www.obj-sys.com/asn1tutorial/node11.html#asn1_struct&#34;&gt;这里&lt;/a&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AirlineFlight  ::=  SEQUENCE {
    airline   IA5String,
    flight    NumericString,
    seats     SEQUENCE {
                  maximum   INTEGER,
                  occupied  INTEGER,
                  vacant    INTEGER
    },
    airport   SEQUENCE {
                  origin             IA5String,
                  stop1       [0]    IA5String  OPTIONAL,
                  stop2       [1]    IA5String  OPTIONAL,
                  destination        IA5String
              },
    crewsize ENUMERATED {
                 six    (6),
                 eight  (8),
                 ten    (10)
             },
    cancel   BOOLEAN    DEFAULT FALSE
}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而编码则是具体实现序列化以及反序列化的操作，ASN.1 有很多种编码方式，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Basic Encoding Rule (BER)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Canonical Encoding Rules (CER)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distinguished Encoding Rules (DER)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;XML Encoding Rules (XER)&lt;/li&gt;
&lt;li&gt;Packed Encoding Rules (PER)&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇笔记主要记录 ASN.1 记法以及 BER／DER 这两种常用编码。&lt;/p&gt;

&lt;h4 id=&#34;类型-tag&#34;&gt;类型／Tag&lt;/h4&gt;

&lt;p&gt;ASN.1 中数据是有类型的，不同类型的数据有不同的值域，类型按特点用途可以划分成以下四种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;simple type&lt;/strong&gt;，“原子”类型，例如 BOOLEAN，INTERGER 等本身不可分解的基本类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;structured type&lt;/strong&gt;，由其它类型组装而成的类型，包括 SEQUENCE，SEQUENCE OF，SET，SET OF，类似于一些计算机语言中的 struct, array, set 等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tagged type&lt;/strong&gt;，类似于类型别名，用于包装一个已有的类型；这在一些有歧义的场合下可作区分用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other type&lt;/strong&gt;，包括 CHOICE 和 ANY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每一种类型（除 CHOICE 和 ANY 外）都可以由一个 &lt;code&gt;tag := (class, tag number)&lt;/code&gt; 来唯一标识（所以以下 &amp;ldquo;tag&amp;rdquo; 和 “类型” 这两个词基本等价混用），其中类别 &lt;code&gt;class&lt;/code&gt;，相当于命名空间；非负整数 &lt;code&gt;tag number&lt;/code&gt;，相当于在此命名空间中的类型编号；有四种类别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;universal&lt;/strong&gt;，内建类别，这一类别的 tag 对所有应用来说都表示相同的类型，貌似大部分（还是全部？）的 simple/structured 类型都定义在这个类别中，由 X.208 所定义，以下是一些例子：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;End-of-Content&lt;/code&gt;: tag number 为 0，这是个特殊的类型，用于标识不确定长度数据的结束，下面再详叙&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOOLEAN&lt;/code&gt;: tag number 为 1，布尔类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INTERGER&lt;/code&gt;: tag number 为 2，任意精度的整数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BIT STRING&lt;/code&gt;: tag number 为 3，任意长度的比特串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OCTET STRING&lt;/code&gt;: tag number 为 4，任意长度的字节串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;: tag number 为 5&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OBJECT IDENTIFIER(OID)&lt;/code&gt;: tag number 为 6，&lt;a href=&#34;https://en.wikipedia.org/wiki/Object_identifier&#34;&gt;对象标识符&lt;/a&gt;，用于为各种“东西”／“概念”起一个唯一的标识符，由机构 ITU 和 ISO/IEC 标准化；其具体形式类似于域名的多级树状结构，子级对象从属于父对象，只是每一级由一个整数表示，例如：

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1&#34;&gt;1&lt;/a&gt; 表示的是 iso&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2&#34;&gt;1.2&lt;/a&gt; member-body，ISO member bodies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840&#34;&gt;1.2.840&lt;/a&gt; us，美国&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549&#34;&gt;1.2.840.113549&lt;/a&gt; rsadsi，即 RSA Security LLC 公司&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549.1&#34;&gt;1.2.840.113549.1&lt;/a&gt; pkcs，即 RSA 公司制定的 Public-Key Cryptography Standards (PKCS) 系列标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549.1.1&#34;&gt;1.2.840.113549.1.1&lt;/a&gt; pkcs-1，即 PKCS#1 标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oid-info.com/get/1.2.840.113549.1.1.13&#34;&gt;1.2.840.113549.1.1.13&lt;/a&gt; sha512WithRSAEncryption&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTF8 STRING&lt;/code&gt;: tag number 为 12&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SEQUENCE 和 SEQUENCE OF&lt;/code&gt;: tag number 为 16，有序的结构体和列表（不明白为什么不区分两个 tag 呢？）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SET 和 SET OF&lt;/code&gt;: tag number 为 17，无序的结构体和列表（继续不明白为什么不区分两个 tag）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PrintableString&lt;/code&gt;: tag number 为 19（有了 &lt;code&gt;OCTET STRING&lt;/code&gt; 为什么还要区分这个呢？）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IA5String&lt;/code&gt;: tag number 为 22，大致等价于 ASCII 字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTCTIME&lt;/code&gt;: tag number 为 23&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;application&lt;/strong&gt;，这一类别的 tag 的意义由某应用内定义，对不同的应用来说，即使相同的 tag number 对应的是不同的含义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private&lt;/strong&gt;，这一类别的 tag 的意义由某企业或组织定义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context-specific&lt;/strong&gt;，这一类别的 tag 主要用于在特定的上下文中里解决歧义问题，例如某个 SEQUENCE 类型里面包含了两个相邻的可缺省的 INTERGER 字段，假如编码过后只传来一个整数（另外一个取缺省值），那究竟这个值是属于哪个字段呢？这时候就需要给这两个字段封装成新的 tagged 类型加以区分&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ber-basic-encoding-rules-简介&#34;&gt;BER (Basic Encoding Rules) 简介&lt;/h4&gt;

&lt;p&gt;BER 对数据的编码一般由以下三（或四）个部件按顺序构成，常简称 &lt;strong&gt;TLV&lt;/strong&gt; (Type-Length-Value)：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Identifier octets&lt;/strong&gt;（T）：用于编码这个数据的类型／tag&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length octets&lt;/strong&gt;（L）：用于编码数据的长度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contents octets&lt;/strong&gt;（V）：实际数据的编码，长度可以为 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;End-of-contents octets&lt;/strong&gt;（optional）：有些数据在编码时还不知道具体长度，例如流数据，这个时候需要有一个结束标志&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Identifier octets&lt;/strong&gt; 对类型的编码使用 1+ 个字节，第一个字节编码包括 tag class，primitive 标志位，以及 tag number ：小于等于 30 的 tag number 直接编码在第一个字节；对于更大的 tag number，第一字节写死 31，并用后续字节的低 7 位编码实际 tag number，后续字节的最高位设为 1，除了最后一个用以标识结束；整理图示如下：&lt;/p&gt;

&lt;a href=&#34;./asn1-ber-identifier-octets.png&#34;&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; src=&#34;./asn1-ber-identifier-octets.png&#34; alt=&#34;Public Key Cryptography 笔记（2.1）-- ASN.1 ./asn1-ber-identifier-octets.png&#34;&gt;&lt;/a&gt;


&lt;p&gt;&lt;strong&gt;Length octets&lt;/strong&gt; 对实际数据的长度进行编码，有三种形式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;确定长度短形式，可编码 &lt;span&gt;\([0, 127]\)&lt;/span&gt;
，仅需要一个字节编码&lt;/li&gt;
&lt;li&gt;确定长度长形式，可编码 &lt;span&gt;\([0, 2^{8\times126}-1]\)&lt;/span&gt;
，需要两个到127个字节编码&lt;/li&gt;
&lt;li&gt;不确定长度形式，用于在编码阶段无法确定长度的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体方法整理如下图：&lt;/p&gt;

&lt;a href=&#34;./asn1-ber-length-octets.png&#34;&gt;&lt;img style=&#34;max-width: 100%; height: auto;&#34; src=&#34;./asn1-ber-length-octets.png&#34; alt=&#34;Public Key Cryptography 笔记（2.1）-- ASN.1 ./asn1-ber-length-octets.png&#34;&gt;&lt;/a&gt;


&lt;p&gt;&lt;strong&gt;Content octets&lt;/strong&gt; 不同类型的数据编码方式各异，见下面分述&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;End-of-Content octets&lt;/strong&gt; 对于不确定长度的复合类型数据，在最后需要有一个结束标识 &lt;code&gt;00 00&lt;/code&gt; （两个值为 0 的字节），这其实就是一个 &lt;code&gt;End-of-Content&lt;/code&gt; 类型的数据的 BER 编码：因为它是 universal 中 tag number 为 0 的，且它没有数据，所以 length-octets 为 0&lt;/p&gt;

&lt;h4 id=&#34;der-distinguished-encoding-rules-简介&#34;&gt;DER (Distinguished Encoding Rules) 简介&lt;/h4&gt;

&lt;p&gt;DER 其实是 BER 的一个严格子集（即任意 DER 编码的数据都是合法的 BER 编码，但反之则未必），它要求对数据只能有唯一一种编码方式，这样做的原因是例如在创建数字签名的时候，同一份数据假如用 BER 里不同的编码方式（例如长度可以用长模式或短模式），那么会产生不一样的签名结果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/X.690#DER_encoding&#34;&gt;wiki&lt;/a&gt; 上列出一些最显著的一些限制规则，如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只能使用确定形式来编码长度，且必须使用最短的编码形式（如长度若小于等于 127，则必须使用短形式）&lt;/li&gt;
&lt;li&gt;各种 string 类型必须使用 primitive 的编码方式&lt;/li&gt;
&lt;li&gt;SET 类型（无序结构体）里的字段需要按照 tag 值的大小排序进行编码（排序了就唯一了）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;一些类型的记法及编码方式&#34;&gt;一些类型的记法及编码方式&lt;/h4&gt;

&lt;p&gt;&amp;hellip;未完待续&lt;/p&gt;

&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://luca.ntop.org/Teaching/Appunti/asn1.html&#34;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/X.690#BER_encoding&#34;&gt;https://en.wikipedia.org/wiki/X.690#BER_encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.obj-sys.com/asn1tutorial/asn1only.html&#34;&gt;https://www.obj-sys.com/asn1tutorial/asn1only.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Public Key Cryptography 笔记（2）-- 存储格式和标准</title>
      <link>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-format-and-standard/</link>
      <pubDate>Thu, 26 Jan 2017 17:43:37 +0800</pubDate>
      
      <guid>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-2-format-and-standard/</guid>
      <description>

&lt;h3 id=&#34;rsa-on-disk&#34;&gt;RSA on disk&lt;/h3&gt;

&lt;p&gt;如前所描述，RSA 的公私钥实际上就是些数字，但我们平时实际使用的是 .pem 格式（或 .der）的 key 。&lt;/p&gt;

&lt;p&gt;.pem 格式头部和尾部的有一些标识符（&lt;code&gt;-----BEGIN XXXX-----&lt;/code&gt;）这些是为了让 parser 可以马上知道这个文件包含的是公钥私钥，或是证书等。&lt;/p&gt;

&lt;p&gt;中间的数据其实是 base64 编码过后的 &lt;a href=&#34;https://en.wikipedia.org/wiki/X.690#DER_encoding&#34;&gt;DER（Distinguished Encoding Rules）&lt;/a&gt; 编码的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;ASN.1（Abstract Syntax Notation One）&lt;/a&gt; 数据。&lt;/p&gt;

&lt;p&gt;写个程序验证以下（dec.py）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

import sys
from base64 import b64decode
from pyasn1.codec.der.decoder import decode as der_decode

def read_pem(f, asn1Spec=None):

    return der_decode(
        b64decode(
            &#39;&#39;.join([line.strip() for line in f if not line.startswith(&#39;-----&#39;)])
        ), asn1Spec=asn1Spec
    )

obj, _ = read_pem(open(sys.argv[1]))

print obj.prettyPrint()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找一个 rsa private key 来跑一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./dec.py ca-key.pem
Sequence:
 &amp;lt;no-name&amp;gt;=0
 &amp;lt;no-name&amp;gt;=893023574113042040269634126903705690958192000367515749793690532339562261663040768984677949208969821111506076369919400865801870985710613745908260652498336371620343220418005606803657105824685015775676961140056140842104922723725658584469937036979589039943318206308234450689935285531106176400784666850060612721223693026581160586984891869615299748396327063287952075098361379463194619694679249727200666343866879641226753061213723029674074572257689929441761207652940540816182884905731304910753429627574542805302378789826317425085431344299593860348296475098275788724990249961382297055893837789210216811880295130941496086631466846898230102127302757337004369112580595622821486216735822235200640222222944221601570231272966140106941857253100312153098428839206633396871491965363584739634413789118376819458819246161914101471359882766752512369669989338842342284961310600856321697107602376430660404437017714184604092513856991285419405296956080590982024711058544298854586244916166800299716510005045028393869316903124931993350151904669792718044403523729143307225465547206325525108357699688142798085183620461364419641399258446567984823312671315017896056518369422953112217687200988245732031363722479836324436839592416038603174283616122293984715039728219
 &amp;lt;no-name&amp;gt;=65537
 &amp;lt;no-name&amp;gt;=.....
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASN.1 中 Sequence 相当于一般语言里的 struct，所以这个 private key 里是一个结构体，包含七八个数字，但所有字段名字都是 &lt;code&gt;&amp;lt;no-name&amp;gt;&lt;/code&gt;，这是因为没有指定 specifiction。&lt;/p&gt;

&lt;p&gt;修改一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ...
from pyasn1_modules import rfc2437

# ...
obj, _ = read_pem(open(sys.argv[1]), asn1Spec=rfc2437.RSAPrivateKey())
# ...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新运行一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./dec.py ca-key.pem
RSAPrivateKey:
 version=0
 modulus=893023574113042040269634126903705690958192000367515749793690532339562261663040768984677949208969821111506076369919400865801870985710613745908260652498336371620343220418005606803657105824685015775676961140056140842104922723725658584469937036979589039943318206308234450689935285531106176400784666850060612721223693026581160586984891869615299748396327063287952075098361379463194619694679249727200666343866879641226753061213723029674074572257689929441761207652940540816182884905731304910753429627574542805302378789826317425085431344299593860348296475098275788724990249961382297055893837789210216811880295130941496086631466846898230102127302757337004369112580595622821486216735822235200640222222944221601570231272966140106941857253100312153098428839206633396871491965363584739634413789118376819458819246161914101471359882766752512369669989338842342284961310600856321697107602376430660404437017714184604092513856991285419405296956080590982024711058544298854586244916166800299716510005045028393869316903124931993350151904669792718044403523729143307225465547206325525108357699688142798085183620461364419641399258446567984823312671315017896056518369422953112217687200988245732031363722479836324436839592416038603174283616122293984715039728219
 publicExponent=65537
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整的定义是在 &lt;a href=&#34;https://en.wikipedia.org/wiki/PKCS_1&#34;&gt;PKCS#1&lt;/a&gt; 标准中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RSAPrivateKey ::= SEQUENCE {
  version           Version,
  modulus           INTEGER,  -- n
  publicExponent    INTEGER,  -- e
  privateExponent   INTEGER,  -- d
  prime1            INTEGER,  -- p
  prime2            INTEGER,  -- q
  exponent1         INTEGER,  -- d mod (p-1)
  exponent2         INTEGER,  -- d mod (q-1)
  coefficient       INTEGER,  -- (inverse of q) mod p
  otherPrimeInfos   OtherPrimeInfos OPTIONAL
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 modulus/publicExponent/privateExponent 即模／公钥幂／私钥幂，可以看到实际中的 RSA 私钥也是包含 publicExponent 的；所以这就是为什么 openssl 工具中能从私钥中导出公钥的原因。&lt;/p&gt;

&lt;p&gt;剩下的其它参数则是使用中国剩余定理加速计算而预先计算好的参数。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://luca.ntop.org/Teaching/Appunti/asn1.html&#34;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf&#34;&gt;https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem&#34;&gt;https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crypto.stackexchange.com/questions/1729/why-does-the-pkcs1-rsa-private-key-structure-contain-more-than-just-exponent-and&#34;&gt;http://crypto.stackexchange.com/questions/1729/why-does-the-pkcs1-rsa-private-key-structure-contain-more-than-just-exponent-and&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16899247/how-can-i-decode-a-ssl-certificate-using-python&#34;&gt;http://stackoverflow.com/questions/16899247/how-can-i-decode-a-ssl-certificate-using-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Public Key Cryptography 笔记（1）-- RSA</title>
      <link>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-1-rsa/</link>
      <pubDate>Tue, 24 Jan 2017 11:52:55 +0800</pubDate>
      
      <guid>//huangjunwen.github.io/post/2017/public-key-cryptography-notes-1-rsa/</guid>
      <description>

&lt;script type=&#34;text/javascript&#34; async src=&#34;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;&lt;/script&gt;


&lt;p&gt;这一系列的笔记主要是对学习到的公钥加密体系知识的记录和梳理，主要以 RSA 算法为代表，以及从中衍生开去的各种应用：ssl/tls，ssh，gpg 等等我们每天都依赖的东西。&lt;/p&gt;

&lt;h3 id=&#34;rsa-主要原理&#34;&gt;RSA 主要原理&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&#34;&gt;RSA&lt;/a&gt; 的原理是在于能够找到三个很大的正整数 &lt;span&gt;\(e,d,n\)&lt;/span&gt;
 使得对于任何 &lt;span&gt;\(0\le{m}\lt{n}\)&lt;/span&gt;
：&lt;/p&gt;

&lt;span&gt;$$(m^e)^d\equiv m\pmod{n}$$&lt;/span&gt;


&lt;p&gt;其中公钥为 &lt;span&gt;\((n,e)\)&lt;/span&gt;
，可以发送给任何人；私钥为 &lt;span&gt;\((n,d)\)&lt;/span&gt;
，只能由所有者掌握。RSA 支持 4 种操作：加密／解密，签名／验证签名。&lt;/p&gt;

&lt;h4 id=&#34;加密&#34;&gt;加密&lt;/h4&gt;

&lt;p&gt;首先用一些编码手段把需要加密的信息转换成整数 &lt;span&gt;\(m\)&lt;/span&gt;
 ，用公钥中的两个参数计算&lt;/p&gt;

&lt;span&gt;$$c=m^e\pmod{n}$$&lt;/span&gt;


&lt;p&gt;&lt;span&gt;\(c\)&lt;/span&gt;
 就是加密后的信息了。&lt;/p&gt;

&lt;h4 id=&#34;解密&#34;&gt;解密&lt;/h4&gt;

&lt;p&gt;中学知识温习时间：&lt;/p&gt;

&lt;span&gt;$$ab\pmod{n}\\=(xn&amp;#43;a_r)(yn&amp;#43;b_r)\pmod{n}\\={a_r}{b_r}\pmod{n}\\=(a\pmod{n})(b\pmod{n})\pmod{n}$$&lt;/span&gt;


&lt;p&gt;所以：&lt;/p&gt;

&lt;span&gt;$$x^y\pmod{n}\\=(xx...x)\pmod{n}\\=(x\pmod{n})(x\pmod{n})...\pmod{n}\\=(x\pmod{n})^y\pmod{n}$$&lt;/span&gt;


&lt;p&gt;即在模运算中，只要算余数就可以了。&lt;/p&gt;

&lt;p&gt;由私钥所有者计算&lt;/p&gt;

&lt;span&gt;$$c^d\pmod{n}=(m^e\pmod{n})^d\pmod{n}=(m^e)^d\pmod{n}=m\pmod{n}$$&lt;/span&gt;


&lt;p&gt;就能还原原来的信息了。&lt;del&gt;（数学差真啰嗦啊。。。）&lt;/del&gt;&lt;/p&gt;

&lt;h4 id=&#34;签名&#34;&gt;签名&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;首先对要签名的信息作一个 &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographic_hash_function&#34;&gt;message digest&lt;/a&gt;，常用的如 MD5 和 SHA 系列；&lt;/li&gt;
&lt;li&gt;然后把这个 digest 转换成整数 &lt;span&gt;\(m\)&lt;/span&gt;
 使得 &lt;span&gt;\(1\le{m}\lt{n}\)&lt;/span&gt;
；&lt;/li&gt;
&lt;li&gt;最后用私钥 &lt;span&gt;\((n,d)\)&lt;/span&gt;
 计算 &lt;span&gt;\(s=m^d\pmod{n}\)&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;验证签名&#34;&gt;验证签名&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;用公钥 &lt;span&gt;\((n,e)\)&lt;/span&gt;
 计算 &lt;span&gt;\(v=s^e\pmod{n}\)&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;把 &lt;span&gt;\(v\)&lt;/span&gt;
 转换回 digest&lt;/li&gt;
&lt;li&gt;独立对要签名的信息再作一次 digest&lt;/li&gt;
&lt;li&gt;对比这两个 digest，如果相同的话，那这个签名就是有效的&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;小结&#34;&gt;小结&lt;/h4&gt;

&lt;p&gt;可以看到加解密和签名验签刚好是两个方向：前者是公钥加密发送给所有者解密，后者是用私钥签名发送给其他人用公钥验签；所以这就是为何一般&lt;a href=&#34;http://www.di-mgt.com.au/rsa_alg.html#weaknesses&#34;&gt;不建议使用相同的 key 同时用作加密和签名&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Using the same key for encryption and signing
Given that the underlying mathematics is the same for encryption and signing, only in reverse, if an attacker can convince a key holder to sign an unformatted encrypted message using the same key then she gets the original.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实际算法&#34;&gt;实际算法&lt;/h3&gt;

&lt;p&gt;包括 key 的生成算法，计算时的优化，对信息的编码等，以及 RSA 的数学上的证明；有兴趣可以看一下下面参考的链接，稍微摘录一些简单而重要的点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;计算 &lt;span&gt;\(y=x^e\pmod{n}\)&lt;/span&gt;
 （所谓 modular exponentiation）的复杂度大约为 &lt;span&gt;\(O(k^3)\)&lt;/span&gt;
，其中 &lt;span&gt;\(k\)&lt;/span&gt;
 是 &lt;span&gt;\(n\)&lt;/span&gt;
 的长度（例如 1024 bits），且当 &lt;span&gt;\(e\)&lt;/span&gt;
 的二进制表示中 1 的数量越多则越慢。&lt;/li&gt;
&lt;li&gt;公钥幂 &lt;span&gt;\(e\)&lt;/span&gt;
 一般选取固定的：例如
&lt;span&gt;$$3=2^{2^0}&amp;#43;1\\5=2^{2^1}&amp;#43;1\\17=2^{2^2}&amp;#43;1\\257=2^{2^3}&amp;#43;1\\65537=2^{2^4}&amp;#43;1$$&lt;/span&gt;

这5个是前五个 fermat number：&lt;span&gt;\(F_x=2^{2^x}&amp;#43;1\)&lt;/span&gt;
 ，恰好都是素数，但 &lt;span&gt;\(F_5\)&lt;/span&gt;
 以及后面的 fermat number 不是素数。显然这些数字的二进制表示只有两个 1，如上述原因，在加密的过程中能节省计算时间。实际应用中一般都是使用 65537 ，因为小的 &lt;span&gt;\(e\)&lt;/span&gt;
 不太安全。&lt;/li&gt;
&lt;li&gt;模 &lt;span&gt;\(n\)&lt;/span&gt;
 一般是由两个( &lt;span&gt;\(n=pq\)&lt;/span&gt;
 )或更多个随机产生（且满足一些数学条件）的大素数（所谓 &amp;ldquo;multi-prime&amp;rdquo; RSA）相乘而得。&lt;/li&gt;
&lt;li&gt;私钥幂 &lt;span&gt;\(d\)&lt;/span&gt;
 是从模 &lt;span&gt;\(n\)&lt;/span&gt;
 的因子（&lt;span&gt;\(p,q\)&lt;/span&gt;
）以及 &lt;span&gt;\(e\)&lt;/span&gt;
 推导出来，由于模是公开的（公钥的一部分），故 RSA 的其中一个安全因素在于：&lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_factorization&#34;&gt;分解一个大数&lt;/a&gt;是困难的。&lt;/li&gt;
&lt;li&gt;多个素数相乘结果作为模的一个好处是可以更快速的计算 &lt;span&gt;\(m=c^d\pmod{n}\)&lt;/span&gt;


&lt;ul&gt;
&lt;li&gt;使用中国剩余定理（Chinese Remainder Theorem，CRT）可以把这个计算转换成对 &lt;span&gt;\(p,q\)&lt;/span&gt;
 的 modular exponentiation 计算，而 &lt;span&gt;\(p, q\)&lt;/span&gt;
 的长度都只有 &lt;span&gt;\(n\)&lt;/span&gt;
 的一半，所以复杂度会降低到原来的&lt;a href=&#34;http://www.di-mgt.com.au/crt_rsa.html#crtarithmetic&#34;&gt;四分之一&lt;/a&gt;：&lt;span&gt;\(O(2(\cfrac{k}{2})^3)=O(\cfrac{k^3}{4})\)&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.di-mgt.com.au/rsa_alg.html&#34;&gt;http://www.di-mgt.com.au/rsa_alg.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.di-mgt.com.au/rsa_theory.html&#34;&gt;http://www.di-mgt.com.au/rsa_theory.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>用 iptables 来配置 port knocking</title>
      <link>//huangjunwen.github.io/post/2016/port-knocking-using-iptables/</link>
      <pubDate>Tue, 20 Dec 2016 10:20:54 +0800</pubDate>
      
      <guid>//huangjunwen.github.io/post/2016/port-knocking-using-iptables/</guid>
      <description>&lt;p&gt;对于正式环境的服务器来说，每当查看到 auth.log 里头那些撞大运的 ssh 登录尝试，心里总是有点惴惴不安的。虽然 public key authentication 号称安全，但是谁说得准呢？而且不知道配置里会不会有错误，要是有多一层的防护总是好的。&lt;/p&gt;

&lt;p&gt;以前听说过 &lt;a href=&#34;https://en.wikipedia.org/wiki/Port_knocking&#34;&gt;Port knocking&lt;/a&gt; 这种技术了，大致的思路就是设定一系列随机端口（例如：7421，3411，9088等等）作为暗号，用户在访问服务器之前，要依次“敲”一下这几个端口（即相继发送网络包到这几个端口上），这些端口当然是关闭状态啦，但服务器上可以侦察得到这些敲门，如果暗号对了，就给访问者 ip 开放服务端口（例如22）。&lt;/p&gt;

&lt;p&gt;还有一些更高级的，例如在网络包里存放加密信息等，不过这就复杂了，暂且不表。&lt;/p&gt;

&lt;p&gt;一般要实现这样的功能，需要有独立的 deamon 程序跑在后台检查日志，但有个问题，如果这个 deamon 不够健壮挂了的话，就再也没人上得去了。&lt;/p&gt;

&lt;p&gt;前段时间看到 &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; 上一篇单纯使用 iptables 就能实现 Port knocking 的教程，不需要单独开发 deamon，只要配置 iptables 的 rules 就能实现这样的功能，觉得很实用，分享在此：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-port-knocking-using-only-iptables-on-an-ubuntu-vps&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-configure-port-knocking-using-only-iptables-on-an-ubuntu-vps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不过我用的时候发现个问题，就是 tcp 包在发送的时候，好像一次过会发送多个包，这样敲门的序列就会变成类似：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;7421
7421
3411
9088
9088
9088
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以我把 rules 改成接纳每个端口可以连续 N 次，只要下一个不一样的是正确的就可以接受：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

PORT1=xxxx
PORT2=xxxx
PORT3=xxxx

# reset firewall
iptables -F
iptables -X
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

# create new chains used by port knocking
iptables -N KNOCKING
iptables -N GATE1
iptables -N GATE2
iptables -N GATE3
iptables -N PASSED

# accept current connections (keep current SSH connections)
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# accept local machine&#39;s connection
iptables -A INPUT -i lo -j ACCEPT

# accept http/https or other exported services
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT

# now pass all other to the KNOCKING chain
iptables -A INPUT -j KNOCKING

# KNOCKING dispatch
iptables -A KNOCKING -m recent --reap --rcheck --seconds 3600 --name AUTH3 -j PASSED
iptables -A KNOCKING -m recent --reap --rcheck --seconds 10 --name AUTH2 -j GATE3
iptables -A KNOCKING -m recent --reap --rcheck --seconds 10 --name AUTH1 -j GATE2
iptables -A KNOCKING -j GATE1

iptables -A GATE1 -p tcp --dport $PORT1 -m recent --name AUTH1 --set -j DROP
iptables -A GATE1 -j DROP

iptables -A GATE2 -p tcp --dport $PORT1 -j DROP         # allow $PORT1 duplication
iptables -A GATE2 -m recent --name AUTH1 --remove
iptables -A GATE2 -p tcp --dport $PORT2 -m recent --name AUTH2 --set -j DROP
iptables -A GATE2 -j GATE1

iptables -A GATE3 -p tcp --dport $PORT2 -j DROP         # allow $PORT2 duplication
iptables -A GATE3 -m recent --name AUTH2 --remove
iptables -A GATE3 -p tcp --dport $PORT3 -m recent --name AUTH3 --set -j DROP
iptables -A GATE3 -j GATE1

iptables -A PASSED -p tcp --dport $PORT3 -j DROP        # allow $PORT3 duplication
iptables -A PASSED -p tcp --dport 22 -j ACCEPT
iptables -A PASSED -j DROP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外还有些修改，例如 AUTH3 的时候，允许用户有一个小时（3600秒）的时间可以随意连接 22 端口。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>免输入密码登录 mysql</title>
      <link>//huangjunwen.github.io/post/2016/mysql-client-auto-login-without-password/</link>
      <pubDate>Sun, 18 Dec 2016 09:58:58 +0800</pubDate>
      
      <guid>//huangjunwen.github.io/post/2016/mysql-client-auto-login-without-password/</guid>
      <description>

&lt;p&gt;对于一些 &lt;del&gt;(古董)&lt;/del&gt; mysql 管理员来说，直接用 mysql client 连接生产环境的数据库进行操作是很常见的事情。&lt;/p&gt;

&lt;p&gt;根据 Mysql 的 &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/password-security-user.html&#34;&gt;End-User Guidelines for Password Security&lt;/a&gt;：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在 command line 上用 &lt;code&gt;-p xxxxx&lt;/code&gt; 直接指定密码是很危险的，因为别人 &lt;code&gt;ps&lt;/code&gt; 一下就看到了。&lt;/li&gt;
&lt;li&gt;在 command line 上用 &lt;code&gt;-p&lt;/code&gt; 然后在 prompt 中输入密码，这样相对安全得多，但这样得手动输入了。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;~/.my.cnf&lt;/code&gt; 里写下 password，似乎两者兼得唯有此法，但这个配置始终是明文的，感觉还是不太安全。&lt;/li&gt;
&lt;li&gt;设置在 &lt;code&gt;MYSQL_PWD&lt;/code&gt; 环境变量中，extremely insecure and should not be used&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为之前有&lt;a href=&#34;https://blog.erincall.com/p/using-pgp-to-encrypt-the-ansible-vault&#34;&gt;用 GPG 加密 ansible 的 vault 密码&lt;/a&gt;的经验： gpg 负责加密，gpg-agent 负责偷懒；我想也能用在这里吧。&lt;/p&gt;

&lt;p&gt;首先设定最终要达到的效果：在 local machine 上执行一个脚本，它会通过 gpg-agent 解密出连接参数，再 ssh 到生产环境机器上（生产数据库只能由生产环境的 ip 访问），执行 mysql client 进行连接和操作。&lt;/p&gt;

&lt;h3 id=&#34;初步尝试&#34;&gt;初步尝试&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
$ ssh $SSH_HOST &amp;quot;mysql -p -h $DB_HOST -u $DB_UESR $DB_NAME&amp;quot;
Enter password: xxxxxx
show tables;

^D
Tables_in_DB_NAME
xxx
yyy
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里密码会回显，且输入的命令（&lt;code&gt;show tables;&lt;/code&gt;）直到输入 Ctrl+D （EOF）才执行，返回的结果是 &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/batch-mode.html&#34;&gt;batch mode&lt;/a&gt; 格式的。似乎当 mysql client 的标准输入如果不是 tty 的话，则会进入 batch mode: &lt;a href=&#34;https://github.com/mysql/mysql-server/blob/5.7/client/mysql.cc#L1259&#34;&gt;https://github.com/mysql/mysql-server/blob/5.7/client/mysql.cc#L1259&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;让-ssh-分配-tty&#34;&gt;让 ssh 分配 tty&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
$ ssh -t $SSH_HOST &amp;quot;mysql -p -h $DB_HOST -u $DB_UESR $DB_NAME&amp;quot;
Enter password:
Reading table information for completion of table and column names
...
...
Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ssh 加上 &lt;code&gt;-t&lt;/code&gt;，输入密码，进入 interactive mode，一切正常。&lt;/p&gt;

&lt;h3 id=&#34;自动输入密码&#34;&gt;自动输入密码&lt;/h3&gt;

&lt;p&gt;要实现自动输入密码，相当于将密码文本和当前终端的输入连接起来，那用 &lt;code&gt;cat&lt;/code&gt; 命令应该就能实现这个功能：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!bin/bash

cur_tty=&amp;quot;$( tty )&amp;quot;

echo $DB_PASSWORD | cat - $cur_tty | ssh -tt $SSH_HOST &amp;quot;mysql -p -h $DB_HOST -u $DB_UESR $DB_NAME&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里 &lt;code&gt;ssh -tt&lt;/code&gt; 为什么又多了一个 &lt;code&gt;-t&lt;/code&gt; 呢？因为对 ssh 来说，它的标准输入不再是 tty 了（而是 cat 的标准输出 pipe），如果不多加一个 &lt;code&gt;-t&lt;/code&gt; 它不会分配 tty 的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-t  Force pseudo-terminal allocation.  This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services. Multiple -t options force tty allocation, even if ssh has no local tty.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mysql.sh
Enter password:
...
...
Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt; show tables;
show tables;
+-------------------+
| Tables_in_DB_NAME |
+-------------------+
| xxxx              |
| yyyy              |
| ...               |
+-------------------+

mysql&amp;gt; ^[[A

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不需要输入密码了，而且正确进入 interactive mode，但是编辑命令的时候跟原来有点不一样，例如命令会回显多一次，按 UP 键没有出现上一句命令而是 &amp;lsquo;^[[A&amp;rsquo;，要再按一次回车，上一句就直接执行了。这应该是因为 locale machine 的 tty 会 buffer 住当前行用于编辑，直到按回车才发送出去。&lt;/p&gt;

&lt;p&gt;这是多此一举的，正确的方式是 locale machine 上输入什么，原原本本马上发送过去就好了。&lt;/p&gt;

&lt;h3 id=&#34;stty-raw-mode&#34;&gt;stty raw mode&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#!bin/bash

#...

stty_state=&amp;quot;$( stty -g )&amp;quot;

trap &amp;quot;stty $stty_state&amp;quot; EXIT

stty raw -echo

#...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过 &lt;code&gt;stty&lt;/code&gt; 命令来实现这个调整，首先 &lt;code&gt;stty -g&lt;/code&gt; 保存当前 tty 的设置，设置一个 EXIT 的 trap，在这个脚本退出时恢复设置，然后进入 raw 模式。（不过 linux 下的 stty raw 不包括 &lt;code&gt;-echo&lt;/code&gt;，所以这里加上）&lt;/p&gt;

&lt;h3 id=&#34;gpg-解密参数&#34;&gt;gpg 解密参数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/bash

# ...

# extract options from db_credential.sh.gpg, expected in db_credential.sh:
#
# SSH_USER=xxxx
# SSH_HOST=xxxx
# DB_USER=xxxx
# DB_HOST=xxxx
# DB_NAME=xxxx
# DB_PASSWORD=xxxx
eval `gpg --batch --use-agent --decrypt db_credential.sh.gpg`

# ...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;db_credential.sh&lt;/code&gt; 中写好 ssh 跟数据的连接参数，然后用 &lt;code&gt;gpg --encrypt -r your@email db_credential.sh&lt;/code&gt; 加密；脚本里则直接用 &lt;code&gt;eval&lt;/code&gt; 取出解密出来的内容。&lt;/p&gt;

&lt;h3 id=&#34;最终&#34;&gt;最终&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
#!/bin/bash

# extract options from db_credential.sh.gpg, expected in db_credential.sh:
#
# SSH_USER=xxxx
# SSH_HOST=xxxx
# DB_USER=xxxx
# DB_HOST=xxxx
# DB_NAME=xxxx
# DB_PASSWORD=xxxx
eval `gpg --batch --use-agent --decrypt db_credential.sh.gpg`

cur_tty=&amp;quot;$( tty )&amp;quot;

stty_state=&amp;quot;$( stty -g )&amp;quot;

trap &amp;quot;stty $stty_state&amp;quot; EXIT

stty raw -echo

echo $DB_PASSWORD | cat - $cur_tty | ssh -tt -a $SSH_HOST &amp;quot;mysql -p -h $DB_HOST -u $DB_UESR $DB_NAME&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：ssh 的配置里如果 &lt;code&gt;ForwardAgent yes&lt;/code&gt; 的话，似乎不能正常工作，还没找出原因，所以这里加上 &lt;code&gt;-a&lt;/code&gt; 显式地禁用它，因为这个脚本只是用来连数据库的，并不需要用到 ssh authentication。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>